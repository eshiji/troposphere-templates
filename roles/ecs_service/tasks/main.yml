---
- name: Include default environment static vars
  include_vars: ../../inventories/default.yml
  
- name: Include environment static vars
  include_vars: ../../inventories/ecs_service.yml

- name: Create temporary template file
  tempfile:
    state: file
    suffix: tmp_template.yml
  register: tmp_template_path

- name: Generate template
  environment: 
    PYTHON_ENV: "{{ python_env }}"
  shell: "{{ python_path }}/python {{ python_script_path }}/ecs_service.py > tmp_template_path.path"

- debug: 
    var: tmp_template_path.path

- name: Show template
  shell: cat tmp_template_path.path

- name: Upload template to s3 cf templates
  aws_s3:
    profile: "{{ aws_local_profile }}"
    bucket: "{{ aws_s3_cf_templates }}"
    mode: put
    src: tmp_template_path.path
    object: "{{ python_script_name }}.yaml"
    expiration: 1800
  register: uploaded_cf_template

- name: Delete artifacts from the bucket
  aws_s3:
    profile: "{{ aws_local_profile }}"
    bucket: "{{ aws_s3_artifacts }}"
    object: "{{ zip_file_name }}"
    mode: delobj

- name: Zip the source code
  archive:
    path: "{{ source_code_folder }}/*"
    dest: ~/{{ zip_file_name }}
    format: zip

- name: Send zip file to s3 artifacts
  aws_s3:
    bucket: "{{ aws_s3_artifacts }}"
    object: "{{ zip_file_name }}"
    src: "{{ ansible_env.HOME}}/{{ zip_file_name }}"
    mode: put
    region: "{{ aws_region }}"
    profile: "{{ aws_local_profile }}"

- debug: 
    var: uploaded_cf_template.url

- name: Deploy ECS service
  cloudformation:
    profile: "{{ aws_local_profile }}"
    region: "{{ aws_region }}"
    stack_name: "ansible-{{ project_name }}-{{ service_name }}"
    state: present
    template_url: "{{ uploaded_cf_template.url }}"

...